//Â∞Ü‰∏§‰∏™ÂçáÂ∫èÈìæË°®ÂêàÂπ∂‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑ ÂçáÂ∫è ÈìæË°®Âπ∂ËøîÂõû„ÄÇÊñ∞ÈìæË°®ÊòØÈÄöËøáÊãºÊé•ÁªôÂÆöÁöÑ‰∏§‰∏™ÈìæË°®ÁöÑÊâÄÊúâËäÇÁÇπÁªÑÊàêÁöÑ„ÄÇ 
//
// 
//
// Á§∫‰æãÔºö 
//
// ËæìÂÖ•Ôºö1->2->4, 1->3->4
//ËæìÂá∫Ôºö1->1->2->3->4->4
// 
// Related Topics ÈìæË°® 
// üëç 1153 üëé 0

package leetcode.editor.cn;

import java.util.*;
  public class P21MergeTwoSortedLists{
      public static void main(String[] args) {
           Solution solution = new P21MergeTwoSortedLists().new Solution();
           solution.mergeTwoLists(new ListNode(1,new ListNode(2,null)),new ListNode(1,new ListNode(3,null)));
      }
        //leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode prehead = new ListNode(-1);

        ListNode prev = prehead;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                prev.next = l1;
                l1 = l1.next;
            } else {
                prev.next = l2;
                l2 = l2.next;
            }
            prev = prev.next;
        }

        // ÂêàÂπ∂Âêé l1 Âíå l2 ÊúÄÂ§öÂè™Êúâ‰∏Ä‰∏™ËøòÊú™Ë¢´ÂêàÂπ∂ÂÆåÔºåÊàë‰ª¨Áõ¥Êé•Â∞ÜÈìæË°®Êú´Â∞æÊåáÂêëÊú™ÂêàÂπ∂ÂÆåÁöÑÈìæË°®Âç≥ÂèØ
        prev.next = l1 == null ? l2 : l1;

        return prehead.next;
    }
}
static class ListNode{
    public ListNode next;
    public Integer val;
    public ListNode() {}
    public ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    public ListNode(Integer val){
        this.val = val;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

  }